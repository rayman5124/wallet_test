/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace DelegateMgr {
  export type SoClaimInfoStruct = {
    blockNumber: BigNumberish;
    claimable: BigNumberish;
    dlgSnapshot: BigNumberish;
  };

  export type SoClaimInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    blockNumber: BigNumber;
    claimable: BigNumber;
    dlgSnapshot: BigNumber;
  };

  export type UserInfoStruct = {
    delegate: BigNumberish;
    delegateAt: BigNumberish;
    clearingAt: BigNumberish;
    claimable: BigNumberish;
    refund: BigNumberish;
    latestClaimableSetAt: BigNumberish;
    latestClaimAt: BigNumberish;
    escrowReleaseAt: BigNumberish;
    refundRatio: BigNumberish;
  };

  export type UserInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    delegate: BigNumber;
    delegateAt: BigNumber;
    clearingAt: BigNumber;
    claimable: BigNumber;
    refund: BigNumber;
    latestClaimableSetAt: BigNumber;
    latestClaimAt: BigNumber;
    escrowReleaseAt: BigNumber;
    refundRatio: number;
  };
}

export interface FluxInterface extends utils.Interface {
  functions: {
    "addSoId(uint32)": FunctionFragment;
    "auctionMgrCA()": FunctionFragment;
    "burnAddress()": FunctionFragment;
    "burnForAuction(uint256)": FunctionFragment;
    "claim(uint32)": FunctionFragment;
    "claimForSystem(uint32)": FunctionFragment;
    "decimals()": FunctionFragment;
    "delegate(uint32,uint256)": FunctionFragment;
    "devAddress()": FunctionFragment;
    "devRate()": FunctionFragment;
    "dlgDuration()": FunctionFragment;
    "getAuctionMgrCA()": FunctionFragment;
    "getBurnAddress()": FunctionFragment;
    "getDiffForRedlg(uint32,address)": FunctionFragment;
    "getDlgDuration()": FunctionFragment;
    "getEscrowReleaseAt(uint32,address)": FunctionFragment;
    "getLockDuration()": FunctionFragment;
    "getRatio()": FunctionFragment;
    "getRefundAmount(uint32,address)": FunctionFragment;
    "getRepaymentAmount(uint32,address)": FunctionFragment;
    "getSoClaimInfo(uint32)": FunctionFragment;
    "getSoDelegate(uint32)": FunctionFragment;
    "getSoIds()": FunctionFragment;
    "getSopAfterPenalty(uint32,address)": FunctionFragment;
    "getTotalDelegate()": FunctionFragment;
    "getUnDlgAfterClaimDuration()": FunctionFragment;
    "getUnDlgAfterDlgDuration()": FunctionFragment;
    "getUserEscrow(uint32,address)": FunctionFragment;
    "getUserInfo(uint32,address)": FunctionFragment;
    "inKSTA()": FunctionFragment;
    "init(address,address,address,address,address,address)": FunctionFragment;
    "lockDuration()": FunctionFragment;
    "manager()": FunctionFragment;
    "orgsMgr()": FunctionFragment;
    "owner()": FunctionFragment;
    "redelegate(uint32,address)": FunctionFragment;
    "refundRatio()": FunctionFragment;
    "removeSoId(uint32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardTokenMgr()": FunctionFragment;
    "rewardTokenMgrCA()": FunctionFragment;
    "setAuctionMgrCA(address)": FunctionFragment;
    "setBurntSop(uint32,address,uint256)": FunctionFragment;
    "setClaimableBatch(uint32,address[])": FunctionFragment;
    "setDlgDuration(uint256)": FunctionFragment;
    "setLockDuration(uint256)": FunctionFragment;
    "setRatio(uint32,uint32,uint32)": FunctionFragment;
    "setRewardTokenMgr(address)": FunctionFragment;
    "setSoIds(uint32[])": FunctionFragment;
    "setSoUuid(uint32[],string[])": FunctionFragment;
    "setUnDlgAfterClaimDuration(uint256)": FunctionFragment;
    "setUnDlgAfterDlgDuration(uint256)": FunctionFragment;
    "soClaimable(uint32)": FunctionFragment;
    "soDelegate(uint32)": FunctionFragment;
    "soIdList(uint256)": FunctionFragment;
    "soUuid(uint32)": FunctionFragment;
    "sop()": FunctionFragment;
    "sopBurnRatio()": FunctionFragment;
    "totalDelegate()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unDlgAfterClaimDuration()": FunctionFragment;
    "unDlgAfterDlgDuration()": FunctionFragment;
    "undelegate(uint32)": FunctionFragment;
    "undelegateForAuction(uint32,address)": FunctionFragment;
    "userEscrow(uint32,address)": FunctionFragment;
    "userInfo(uint32,address)": FunctionFragment;
    "withdrawEscrow(uint32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSoId"
      | "auctionMgrCA"
      | "burnAddress"
      | "burnForAuction"
      | "claim"
      | "claimForSystem"
      | "decimals"
      | "delegate"
      | "devAddress"
      | "devRate"
      | "dlgDuration"
      | "getAuctionMgrCA"
      | "getBurnAddress"
      | "getDiffForRedlg"
      | "getDlgDuration"
      | "getEscrowReleaseAt"
      | "getLockDuration"
      | "getRatio"
      | "getRefundAmount"
      | "getRepaymentAmount"
      | "getSoClaimInfo"
      | "getSoDelegate"
      | "getSoIds"
      | "getSopAfterPenalty"
      | "getTotalDelegate"
      | "getUnDlgAfterClaimDuration"
      | "getUnDlgAfterDlgDuration"
      | "getUserEscrow"
      | "getUserInfo"
      | "inKSTA"
      | "init"
      | "lockDuration"
      | "manager"
      | "orgsMgr"
      | "owner"
      | "redelegate"
      | "refundRatio"
      | "removeSoId"
      | "renounceOwnership"
      | "rewardTokenMgr"
      | "rewardTokenMgrCA"
      | "setAuctionMgrCA"
      | "setBurntSop"
      | "setClaimableBatch"
      | "setDlgDuration"
      | "setLockDuration"
      | "setRatio"
      | "setRewardTokenMgr"
      | "setSoIds"
      | "setSoUuid"
      | "setUnDlgAfterClaimDuration"
      | "setUnDlgAfterDlgDuration"
      | "soClaimable"
      | "soDelegate"
      | "soIdList"
      | "soUuid"
      | "sop"
      | "sopBurnRatio"
      | "totalDelegate"
      | "transferOwnership"
      | "unDlgAfterClaimDuration"
      | "unDlgAfterDlgDuration"
      | "undelegate"
      | "undelegateForAuction"
      | "userEscrow"
      | "userInfo"
      | "withdrawEscrow"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSoId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionMgrCA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnForAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimForSystem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dlgDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionMgrCA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDiffForRedlg",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDlgDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowReleaseAt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRefundAmount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepaymentAmount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSoClaimInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSoDelegate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSoIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSopAfterPenalty",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnDlgAfterClaimDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnDlgAfterDlgDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEscrow",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "inKSTA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "orgsMgr", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redelegate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSoId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenMgr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenMgrCA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionMgrCA",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurntSop",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimableBatch",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDlgDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRatio",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTokenMgr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSoIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSoUuid",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnDlgAfterClaimDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnDlgAfterDlgDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "soClaimable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "soDelegate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "soIdList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "soUuid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sopBurnRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unDlgAfterClaimDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unDlgAfterDlgDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateForAuction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userEscrow",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEscrow",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addSoId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionMgrCA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnForAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimForSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dlgDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionMgrCA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBurnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiffForRedlg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDlgDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowReleaseAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRefundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepaymentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoClaimInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSoIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSopAfterPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnDlgAfterClaimDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnDlgAfterDlgDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inKSTA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orgsMgr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeSoId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenMgrCA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionMgrCA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurntSop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimableBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDlgDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTokenMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSoIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSoUuid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUnDlgAfterClaimDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnDlgAfterDlgDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "soClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "soDelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "soIdList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "soUuid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sopBurnRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unDlgAfterClaimDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unDlgAfterDlgDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "undelegateForAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEscrow",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "ClaimForSystem(address,uint32,uint256,uint256)": EventFragment;
    "Delegate(address,uint32,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Redelegate(address,uint32,uint256,uint256)": EventFragment;
    "SetClaimableBatch(uint32,uint256,uint256,uint256,uint256)": EventFragment;
    "Undelegate(address,uint32,uint256)": EventFragment;
    "WithdrawEscrow(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimForSystem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Delegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClaimableBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Undelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawEscrow"): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ClaimForSystemEventObject {
  fluxCA: string;
  soId: number;
  amount: BigNumber;
  dlgSnapshot: BigNumber;
}
export type ClaimForSystemEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  ClaimForSystemEventObject
>;

export type ClaimForSystemEventFilter = TypedEventFilter<ClaimForSystemEvent>;

export interface DelegateEventObject {
  user: string;
  soId: number;
  amount: BigNumber;
  clearingAt: BigNumber;
}
export type DelegateEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  DelegateEventObject
>;

export type DelegateEventFilter = TypedEventFilter<DelegateEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RedelegateEventObject {
  user: string;
  soId: number;
  amount: BigNumber;
  clearingAt: BigNumber;
}
export type RedelegateEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  RedelegateEventObject
>;

export type RedelegateEventFilter = TypedEventFilter<RedelegateEvent>;

export interface SetClaimableBatchEventObject {
  soId: number;
  batchLength: BigNumber;
  totalDelegated: BigNumber;
  totalClaimable: BigNumber;
  blockNumber: BigNumber;
}
export type SetClaimableBatchEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber, BigNumber],
  SetClaimableBatchEventObject
>;

export type SetClaimableBatchEventFilter =
  TypedEventFilter<SetClaimableBatchEvent>;

export interface UndelegateEventObject {
  user: string;
  soId: number;
  amount: BigNumber;
}
export type UndelegateEvent = TypedEvent<
  [string, number, BigNumber],
  UndelegateEventObject
>;

export type UndelegateEventFilter = TypedEventFilter<UndelegateEvent>;

export interface WithdrawEscrowEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEscrowEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEscrowEventObject
>;

export type WithdrawEscrowEventFilter = TypedEventFilter<WithdrawEscrowEvent>;

export interface Flux extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FluxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSoId(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    auctionMgrCA(overrides?: CallOverrides): Promise<[string]>;

    burnAddress(overrides?: CallOverrides): Promise<[string]>;

    burnForAuction(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claim(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimForSystem(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delegate(
      _soId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    devRate(overrides?: CallOverrides): Promise<[number]>;

    dlgDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAuctionMgrCA(overrides?: CallOverrides): Promise<[string]>;

    getBurnAddress(overrides?: CallOverrides): Promise<[string]>;

    getDiffForRedlg(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { diff: BigNumber }>;

    getDlgDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEscrowReleaseAt(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRatio(overrides?: CallOverrides): Promise<[number, number, number]>;

    getRefundAmount(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRepaymentAmount(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSoClaimInfo(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DelegateMgr.SoClaimInfoStructOutput]>;

    getSoDelegate(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSoIds(overrides?: CallOverrides): Promise<[number[]]>;

    getSopAfterPenalty(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDelegate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnDlgAfterClaimDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnDlgAfterDlgDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserEscrow(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserInfo(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[DelegateMgr.UserInfoStructOutput]>;

    inKSTA(overrides?: CallOverrides): Promise<[string]>;

    init(
      _manager: string,
      _orgsMgr: string,
      _sop: string,
      _inKstaCA: string,
      _devAddress: string,
      _burnAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    orgsMgr(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redelegate(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    refundRatio(overrides?: CallOverrides): Promise<[number]>;

    removeSoId(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardTokenMgr(overrides?: CallOverrides): Promise<[string]>;

    rewardTokenMgrCA(overrides?: CallOverrides): Promise<[string]>;

    setAuctionMgrCA(
      _auctionMgrCA: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBurntSop(
      _soId: BigNumberish,
      _user: string,
      _delegate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setClaimableBatch(
      _soId: BigNumberish,
      _users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDlgDuration(
      _dlgDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLockDuration(
      _lockDuratoin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRatio(
      _devRate: BigNumberish,
      _refundRation: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRewardTokenMgr(
      _rewardTokenMgrCA: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSoIds(
      _soIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSoUuid(
      _soIds: BigNumberish[],
      _Uuids: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUnDlgAfterClaimDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUnDlgAfterDlgDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    soClaimable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        claimable: BigNumber;
        dlgSnapshot: BigNumber;
      }
    >;

    soDelegate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    soIdList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    soUuid(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    sop(overrides?: CallOverrides): Promise<[string]>;

    sopBurnRatio(overrides?: CallOverrides): Promise<[number]>;

    totalDelegate(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unDlgAfterClaimDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    unDlgAfterDlgDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    undelegate(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    undelegateForAuction(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userEscrow(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; releaseAt: BigNumber }
    >;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        delegate: BigNumber;
        delegateAt: BigNumber;
        clearingAt: BigNumber;
        claimable: BigNumber;
        refund: BigNumber;
        latestClaimableSetAt: BigNumber;
        latestClaimAt: BigNumber;
        escrowReleaseAt: BigNumber;
        refundRatio: number;
      }
    >;

    withdrawEscrow(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addSoId(
    _soId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  auctionMgrCA(overrides?: CallOverrides): Promise<string>;

  burnAddress(overrides?: CallOverrides): Promise<string>;

  burnForAuction(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claim(
    _soId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimForSystem(
    _soId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delegate(
    _soId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  devRate(overrides?: CallOverrides): Promise<number>;

  dlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getAuctionMgrCA(overrides?: CallOverrides): Promise<string>;

  getBurnAddress(overrides?: CallOverrides): Promise<string>;

  getDiffForRedlg(
    _soId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getEscrowReleaseAt(
    _soId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getRatio(overrides?: CallOverrides): Promise<[number, number, number]>;

  getRefundAmount(
    _soId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRepaymentAmount(
    _soId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSoClaimInfo(
    _soId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DelegateMgr.SoClaimInfoStructOutput>;

  getSoDelegate(
    _soId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSoIds(overrides?: CallOverrides): Promise<number[]>;

  getSopAfterPenalty(
    _soId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDelegate(overrides?: CallOverrides): Promise<BigNumber>;

  getUnDlgAfterClaimDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getUnDlgAfterDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getUserEscrow(
    _soId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserInfo(
    _soId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<DelegateMgr.UserInfoStructOutput>;

  inKSTA(overrides?: CallOverrides): Promise<string>;

  init(
    _manager: string,
    _orgsMgr: string,
    _sop: string,
    _inKstaCA: string,
    _devAddress: string,
    _burnAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  manager(overrides?: CallOverrides): Promise<string>;

  orgsMgr(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  redelegate(
    _soId: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  refundRatio(overrides?: CallOverrides): Promise<number>;

  removeSoId(
    _soId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardTokenMgr(overrides?: CallOverrides): Promise<string>;

  rewardTokenMgrCA(overrides?: CallOverrides): Promise<string>;

  setAuctionMgrCA(
    _auctionMgrCA: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBurntSop(
    _soId: BigNumberish,
    _user: string,
    _delegate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setClaimableBatch(
    _soId: BigNumberish,
    _users: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDlgDuration(
    _dlgDuration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLockDuration(
    _lockDuratoin: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRatio(
    _devRate: BigNumberish,
    _refundRation: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRewardTokenMgr(
    _rewardTokenMgrCA: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSoIds(
    _soIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSoUuid(
    _soIds: BigNumberish[],
    _Uuids: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUnDlgAfterClaimDuration(
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUnDlgAfterDlgDuration(
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  soClaimable(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      claimable: BigNumber;
      dlgSnapshot: BigNumber;
    }
  >;

  soDelegate(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  soIdList(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  soUuid(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  sop(overrides?: CallOverrides): Promise<string>;

  sopBurnRatio(overrides?: CallOverrides): Promise<number>;

  totalDelegate(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unDlgAfterClaimDuration(overrides?: CallOverrides): Promise<BigNumber>;

  unDlgAfterDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

  undelegate(
    _soId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  undelegateForAuction(
    _soId: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userEscrow(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; releaseAt: BigNumber }
  >;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      delegate: BigNumber;
      delegateAt: BigNumber;
      clearingAt: BigNumber;
      claimable: BigNumber;
      refund: BigNumber;
      latestClaimableSetAt: BigNumber;
      latestClaimAt: BigNumber;
      escrowReleaseAt: BigNumber;
      refundRatio: number;
    }
  >;

  withdrawEscrow(
    _soId: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSoId(_soId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    auctionMgrCA(overrides?: CallOverrides): Promise<string>;

    burnAddress(overrides?: CallOverrides): Promise<string>;

    burnForAuction(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(_soId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimForSystem(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delegate(
      _soId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    devRate(overrides?: CallOverrides): Promise<number>;

    dlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionMgrCA(overrides?: CallOverrides): Promise<string>;

    getBurnAddress(overrides?: CallOverrides): Promise<string>;

    getDiffForRedlg(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getEscrowReleaseAt(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getRatio(overrides?: CallOverrides): Promise<[number, number, number]>;

    getRefundAmount(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepaymentAmount(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoClaimInfo(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DelegateMgr.SoClaimInfoStructOutput>;

    getSoDelegate(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoIds(overrides?: CallOverrides): Promise<number[]>;

    getSopAfterPenalty(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDelegate(overrides?: CallOverrides): Promise<BigNumber>;

    getUnDlgAfterClaimDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getUnDlgAfterDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getUserEscrow(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<DelegateMgr.UserInfoStructOutput>;

    inKSTA(overrides?: CallOverrides): Promise<string>;

    init(
      _manager: string,
      _orgsMgr: string,
      _sop: string,
      _inKstaCA: string,
      _devAddress: string,
      _burnAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    orgsMgr(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    redelegate(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    refundRatio(overrides?: CallOverrides): Promise<number>;

    removeSoId(_soId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokenMgr(overrides?: CallOverrides): Promise<string>;

    rewardTokenMgrCA(overrides?: CallOverrides): Promise<string>;

    setAuctionMgrCA(
      _auctionMgrCA: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurntSop(
      _soId: BigNumberish,
      _user: string,
      _delegate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimableBatch(
      _soId: BigNumberish,
      _users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDlgDuration(
      _dlgDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockDuration(
      _lockDuratoin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRatio(
      _devRate: BigNumberish,
      _refundRation: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardTokenMgr(
      _rewardTokenMgrCA: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSoIds(_soIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    setSoUuid(
      _soIds: BigNumberish[],
      _Uuids: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUnDlgAfterClaimDuration(
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnDlgAfterDlgDuration(
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    soClaimable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        claimable: BigNumber;
        dlgSnapshot: BigNumber;
      }
    >;

    soDelegate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    soIdList(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    soUuid(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    sop(overrides?: CallOverrides): Promise<string>;

    sopBurnRatio(overrides?: CallOverrides): Promise<number>;

    totalDelegate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unDlgAfterClaimDuration(overrides?: CallOverrides): Promise<BigNumber>;

    unDlgAfterDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

    undelegate(_soId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    undelegateForAuction(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userEscrow(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; releaseAt: BigNumber }
    >;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        delegate: BigNumber;
        delegateAt: BigNumber;
        clearingAt: BigNumber;
        claimable: BigNumber;
        refund: BigNumber;
        latestClaimableSetAt: BigNumber;
        latestClaimAt: BigNumber;
        escrowReleaseAt: BigNumber;
        refundRatio: number;
      }
    >;

    withdrawEscrow(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claim(address,uint256)"(
      user?: string | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(user?: string | null, amount?: null): ClaimEventFilter;

    "ClaimForSystem(address,uint32,uint256,uint256)"(
      fluxCA?: string | null,
      soId?: null,
      amount?: null,
      dlgSnapshot?: null
    ): ClaimForSystemEventFilter;
    ClaimForSystem(
      fluxCA?: string | null,
      soId?: null,
      amount?: null,
      dlgSnapshot?: null
    ): ClaimForSystemEventFilter;

    "Delegate(address,uint32,uint256,uint256)"(
      user?: string | null,
      soId?: null,
      amount?: null,
      clearingAt?: null
    ): DelegateEventFilter;
    Delegate(
      user?: string | null,
      soId?: null,
      amount?: null,
      clearingAt?: null
    ): DelegateEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Redelegate(address,uint32,uint256,uint256)"(
      user?: string | null,
      soId?: null,
      amount?: null,
      clearingAt?: null
    ): RedelegateEventFilter;
    Redelegate(
      user?: string | null,
      soId?: null,
      amount?: null,
      clearingAt?: null
    ): RedelegateEventFilter;

    "SetClaimableBatch(uint32,uint256,uint256,uint256,uint256)"(
      soId?: null,
      batchLength?: null,
      totalDelegated?: null,
      totalClaimable?: null,
      blockNumber?: null
    ): SetClaimableBatchEventFilter;
    SetClaimableBatch(
      soId?: null,
      batchLength?: null,
      totalDelegated?: null,
      totalClaimable?: null,
      blockNumber?: null
    ): SetClaimableBatchEventFilter;

    "Undelegate(address,uint32,uint256)"(
      user?: string | null,
      soId?: null,
      amount?: null
    ): UndelegateEventFilter;
    Undelegate(
      user?: string | null,
      soId?: null,
      amount?: null
    ): UndelegateEventFilter;

    "WithdrawEscrow(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawEscrowEventFilter;
    WithdrawEscrow(
      user?: string | null,
      amount?: null
    ): WithdrawEscrowEventFilter;
  };

  estimateGas: {
    addSoId(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    auctionMgrCA(overrides?: CallOverrides): Promise<BigNumber>;

    burnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    burnForAuction(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claim(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimForSystem(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      _soId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    devRate(overrides?: CallOverrides): Promise<BigNumber>;

    dlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionMgrCA(overrides?: CallOverrides): Promise<BigNumber>;

    getBurnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getDiffForRedlg(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getEscrowReleaseAt(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getRefundAmount(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepaymentAmount(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoClaimInfo(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoDelegate(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoIds(overrides?: CallOverrides): Promise<BigNumber>;

    getSopAfterPenalty(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDelegate(overrides?: CallOverrides): Promise<BigNumber>;

    getUnDlgAfterClaimDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getUnDlgAfterDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getUserEscrow(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inKSTA(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _manager: string,
      _orgsMgr: string,
      _sop: string,
      _inKstaCA: string,
      _devAddress: string,
      _burnAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    orgsMgr(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redelegate(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    refundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    removeSoId(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardTokenMgr(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenMgrCA(overrides?: CallOverrides): Promise<BigNumber>;

    setAuctionMgrCA(
      _auctionMgrCA: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBurntSop(
      _soId: BigNumberish,
      _user: string,
      _delegate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setClaimableBatch(
      _soId: BigNumberish,
      _users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDlgDuration(
      _dlgDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLockDuration(
      _lockDuratoin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRatio(
      _devRate: BigNumberish,
      _refundRation: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRewardTokenMgr(
      _rewardTokenMgrCA: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSoIds(
      _soIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSoUuid(
      _soIds: BigNumberish[],
      _Uuids: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUnDlgAfterClaimDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUnDlgAfterDlgDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    soClaimable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    soDelegate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    soIdList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    soUuid(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sop(overrides?: CallOverrides): Promise<BigNumber>;

    sopBurnRatio(overrides?: CallOverrides): Promise<BigNumber>;

    totalDelegate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unDlgAfterClaimDuration(overrides?: CallOverrides): Promise<BigNumber>;

    unDlgAfterDlgDuration(overrides?: CallOverrides): Promise<BigNumber>;

    undelegate(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    undelegateForAuction(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userEscrow(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawEscrow(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSoId(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    auctionMgrCA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnForAuction(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claim(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimForSystem(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      _soId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dlgDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuctionMgrCA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBurnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDiffForRedlg(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDlgDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEscrowReleaseAt(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRefundAmount(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepaymentAmount(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoClaimInfo(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoDelegate(
      _soId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSopAfterPenalty(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDelegate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnDlgAfterClaimDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnDlgAfterDlgDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEscrow(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      _soId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inKSTA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _manager: string,
      _orgsMgr: string,
      _sop: string,
      _inKstaCA: string,
      _devAddress: string,
      _burnAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orgsMgr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redelegate(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    refundRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSoId(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardTokenMgr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenMgrCA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuctionMgrCA(
      _auctionMgrCA: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBurntSop(
      _soId: BigNumberish,
      _user: string,
      _delegate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setClaimableBatch(
      _soId: BigNumberish,
      _users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDlgDuration(
      _dlgDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLockDuration(
      _lockDuratoin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRatio(
      _devRate: BigNumberish,
      _refundRation: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRewardTokenMgr(
      _rewardTokenMgrCA: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSoIds(
      _soIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSoUuid(
      _soIds: BigNumberish[],
      _Uuids: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUnDlgAfterClaimDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUnDlgAfterDlgDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    soClaimable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    soDelegate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    soIdList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    soUuid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sopBurnRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDelegate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unDlgAfterClaimDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unDlgAfterDlgDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    undelegate(
      _soId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    undelegateForAuction(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userEscrow(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawEscrow(
      _soId: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
